# Default amount of trait points
@xvcv_mdlc_core_modifying_base_num_trait_points = 4
# Values with T1 and T2 core modifying techs, respectively
@xvcv_mdlc_core_modifying_base_num_trait_points_t1 = 5
@xvcv_mdlc_core_modifying_base_num_trait_points_t2 = 6

# Default number of trait picks
@xvcv_mdlc_core_modifying_base_num_trait_picks = 3
# Values with T1 and T2 core modifying techs, respectively
@xvcv_mdlc_core_modifying_base_num_trait_picks_t1 = 4
@xvcv_mdlc_core_modifying_base_num_trait_picks_t2 = 5

# How many trait points does each tier of trait cost to apply to the ruler
@xvcv_mdlc_core_modifying_common_trait_points_cost = 1
@xvcv_mdlc_core_modifying_veteran_trait_points_cost = 2
@xvcv_mdlc_core_modifying_destiny_trait_points_cost = 3

# These numbers are applied to both energy costs, and alloy costs
@xvcv_mdlc_core_modifying_common_trait_cost = 200
@xvcv_mdlc_core_modifying_common_trait_refund = 100
@xvcv_mdlc_core_modifying_veteran_trait_cost = 500
@xvcv_mdlc_core_modifying_veteran_trait_refund = 250
@xvcv_mdlc_core_modifying_destiny_trait_cost = 1000
@xvcv_mdlc_core_modifying_destiny_trait_refund = 500


xvcv_mdlc_core_modifying_trait_pick_effect = {
	optimize_memory
	custom_tooltip = xvcv_mdlc_core_modifying_tooltip_add_$CLASS$_$ID$
	hidden_effect = {
		ruler = {
			if = {
				limit = { NOT = { leader_class = $CLASS$ } }
				change_leader_class = $CLASS$
			}
			add_trait_no_notify = $ID$
			#revert the ruler's leader class
			prev = {
				switch = {
					trigger = has_country_flag
					xvcv_mdlc_core_modifying_ruler_leader_class_official = { prev = { change_leader_class = official } }
					xvcv_mdlc_core_modifying_ruler_leader_class_scientist = { prev = { change_leader_class = scientist } }
					xvcv_mdlc_core_modifying_ruler_leader_class_commander = { prev = { change_leader_class = commander } }
				}
			}
		}
	}
}
xvcv_mdlc_core_modifying_set_subclass_effect = {
	optimize_memory
	custom_tooltip = xvcv_mdlc_core_modifying_tooltip_add_$CLASS$_$ID$
	hidden_effect = {
		#clear the previous flag
		switch = {
			trigger = has_country_flag
			xvcv_mdlc_core_modifying_ruler_leader_class_official = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_official }
			xvcv_mdlc_core_modifying_ruler_leader_class_scientist = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_scientist }
			xvcv_mdlc_core_modifying_ruler_leader_class_commander = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_commander }
		}
		#change the leader class
		ruler = {
			if = {
				limit = { NOT = { leader_class = $CLASS$ } }
				change_leader_class = $CLASS$
			}
			add_trait_no_notify = $ID$
		}
		#and set the country flag
		set_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_$CLASS$
		log = "XVCV_MDLC set ruler class to  $CLASS$  and subclass to  $ID$ "
	}
}
xvcv_mdlc_core_modifying_remove_tier_1_or_2_traits_effect = {
	# Adding the T2 version of a T1 replaces the T1; same for T3 which replaces T2 and T1
	optimize_memory
	hidden_effect = {
		ruler = {
			if = {
				limit = { has_trait = $ID$ }
				remove_trait = $ID$
			}
			if = { #don't use 'else_if' here #a ruler can have both tier 1 and tier 2 traits at the same time #it's rare but not impossible
				limit = { has_trait = $ID$_2 }
				remove_trait = $ID$_2
			}
		}
	}
}
xvcv_mdlc_core_modifying_clear_trait_variables_effect = {
	optimize_memory
	#max trait points
	set_variable = {
		which = xvcv_mdlc_core_modifying_trait_points
		value = @xvcv_mdlc_core_modifying_base_num_trait_points
	}
	#max traits number 
	set_variable = {
		which = xvcv_mdlc_core_modifying_max_traits_number
		value = @xvcv_mdlc_core_modifying_base_num_trait_picks
	}
	# Increase the number of trait points available, for T1 of this tech
	if = {
		limit = { has_technology = xvcv_mdlc_tech_core_modifying_improvement }
		change_variable = {
			which = xvcv_mdlc_core_modifying_trait_points
			value = 1
		}
		change_variable = {
			which = xvcv_mdlc_core_modifying_max_traits_number
			value = 1
		}
	}
	# Give additional points for having T2, so it's a compound effect
	# Having T1 and T2 of this tech awards +2 trait points total
	if = {
		limit = { has_technology = xvcv_mdlc_tech_core_modifying_improvement_2 } 
		change_variable = { which = xvcv_mdlc_core_modifying_trait_points value = 1 }
		change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = 1 }
	}
}
######################
# Adding and refunding
# Whatever is the added cost, the refunded cost is half of that
######################

#for common traits
xvcv_mdlc_core_modifying_trait_add_effect = {
	optimize_memory
	add_resource = { energy = -1 mult = @xvcv_mdlc_core_modifying_common_trait_cost }
	add_resource = { alloys = -1 mult = @xvcv_mdlc_core_modifying_common_trait_cost }
	change_variable = {
		which = xvcv_mdlc_core_modifying_trait_points
		value = -1  # Not significant enough to use @xvcv_mdlc_core_modifying_common_trait_points_cost
	}
	change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = -1 }
}
xvcv_mdlc_core_modifying_trait_return_cost_effect = {
	optimize_memory
	add_resource = {
		energy = @xvcv_mdlc_core_modifying_common_trait_refund
		alloys = @xvcv_mdlc_core_modifying_common_trait_refund
	}
}
xvcv_mdlc_core_modifying_trait_remove_effect = {
	optimize_memory
	xvcv_mdlc_core_modifying_trait_return_cost_effect = yes
	#xvcv_mdlc_core_modifying_trait_return_points_effect
	if = {
		# Refund trait points and picks up to a certain level
		# Ex: with T2 of the core modifying improvement, refund up to 6 points
		limit = {
			OR = {
				check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 6 }
				AND = {
					NOT = { has_technology = xvcv_mdlc_tech_core_modifying_improvement_2 }
					check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 5 }
				}
				AND = {
					NOT = { has_technology = xvcv_mdlc_tech_core_modifying_improvement }
					check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 4 }
				}
			}
		}
		xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
		# For each trait removed, increment points and picks by 1
		else = {
			change_variable = { which = xvcv_mdlc_core_modifying_trait_points value = 1 }
			change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = 1 }
		}
	}
}

#VETERAN # Add/Remove points and picks
xvcv_mdlc_core_modifying_trait_add_alt_effect = {
	optimize_memory
	# add_resource = { energy = -500 alloys = -500 }
	add_resource = { energy = -1 mult = @xvcv_mdlc_core_modifying_veteran_trait_cost }
	add_resource = { alloys = -1 mult = @xvcv_mdlc_core_modifying_veteran_trait_cost }
	change_variable = { which = xvcv_mdlc_core_modifying_trait_points value = -2 }
	change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = -1 }
}

xvcv_mdlc_core_modifying_trait_remove_alt_effect = {
	optimize_memory
	xvcv_mdlc_core_modifying_trait_return_cost_alt_effect = yes
	#xvcv_mdlc_core_modifying_trait_return_points_alt_effect
	if = {
		# Same as above, Refund trait points and picks up to a certain level
		# Ex: with T2 of the core modifying improvement, refund up to 6 points
		limit = {
			OR = {
				check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 6 }
				AND = {
					NOT = { has_technology = xvcv_mdlc_tech_core_modifying_improvement_2 }
					check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 5 }
				}
				AND = {
					NOT = { has_technology = xvcv_mdlc_tech_core_modifying_improvement }
					check_variable = { which = xvcv_mdlc_core_modifying_trait_points value > 4 }
				}
			}
		}
		xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
		else = {
			change_variable = { which = xvcv_mdlc_core_modifying_trait_points value = 2 }
			change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = 1 }
		}
	}
}
xvcv_mdlc_core_modifying_trait_return_cost_alt_effect = {
	optimize_memory
	add_resource = {
		energy = @xvcv_mdlc_core_modifying_veteran_trait_refund
		alloys = @xvcv_mdlc_core_modifying_veteran_trait_refund
	}
}

#DESTINY # Add/Remove points and picks
xvcv_mdlc_core_modifying_trait_add_alt_2_effect = {
	optimize_memory
	# add_resource = { energy = -1000 alloys = -1000 }
	add_resource = { energy = -1 mult = @xvcv_mdlc_core_modifying_destiny_trait_cost }
	add_resource = { alloys = -1 mult = @xvcv_mdlc_core_modifying_destiny_trait_cost }
	change_variable = {
		which = xvcv_mdlc_core_modifying_trait_points
		value = -3
	}
	change_variable = { which = xvcv_mdlc_core_modifying_max_traits_number value = -1 }
}
xvcv_mdlc_core_modifying_trait_remove_alt_2_effect = {
	optimize_memory
	xvcv_mdlc_core_modifying_trait_return_cost_alt_2_effect = yes
	#xvcv_mdlc_core_modifying_trait_return_points_alt_2_effect
	if = {
		limit = {
			OR = {
				check_variable = {
					which = xvcv_mdlc_core_modifying_trait_points
					value > 6
				}
				AND = {
					NOT = {has_technology = xvcv_mdlc_tech_core_modifying_improvement_2 }
					check_variable = {
						which = xvcv_mdlc_core_modifying_trait_points
						value > 5
					}
				}
				AND = {
					NOT = { has_technology = xvcv_mdlc_tech_core_modifying_improvement }
					check_variable = {
						which = xvcv_mdlc_core_modifying_trait_points
						value > @xvcv_mdlc_core_modifying_base_num_trait_points
					}
				}
			}
		}
		xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
		else = {
			change_variable = {
				which = xvcv_mdlc_core_modifying_trait_points
				value = 3
			}
			change_variable = {
				which = xvcv_mdlc_core_modifying_max_traits_number
				value = 1
			}
		}
	}
}
xvcv_mdlc_core_modifying_trait_return_cost_alt_2_effect = {
	optimize_memory
	add_resource = {
		energy = @xvcv_mdlc_core_modifying_destiny_trait_refund
		alloys = @xvcv_mdlc_core_modifying_destiny_trait_refund
	}
}

# Check what traits are already on the ruler, and deduct from total available trait picks + points
xvcv_mdlc_core_modifying_check_existing_traits_on_gui_open_effect = {
    optimize_memory
	# count_traits is a script value from vanilla stellaris
	set_variable = {
		which = xvcv_mdlc_core_modifying_num_active_ruler_traits
		value = value:count_traits
	}
	log = "The ruler has \\[This.xvcv_mdlc_core_modifying_num_active_ruler_traits] active traits."
}

#and that ends here
#or does it? (: